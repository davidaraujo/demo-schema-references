/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.demo.orders.avro.pojo;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8917245976495425551L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"io.confluent.demo.orders.avro.pojo\",\"fields\":[{\"name\":\"order_id\",\"type\":\"long\",\"doc\":\"The id of the order.\"},{\"name\":\"order_date\",\"type\":\"long\",\"logicalType\":\"date\"},{\"name\":\"order_amount\",\"type\":\"double\"},{\"name\":\"products\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"product_id\",\"type\":\"long\"},{\"name\":\"product_name\",\"type\":\"string\"},{\"name\":\"product_price\",\"type\":\"double\"}]}}},{\"name\":\"customer\",\"type\":{\"type\":\"record\",\"name\":\"Customer\",\"fields\":[{\"name\":\"customer_id\",\"type\":\"long\"},{\"name\":\"customer_name\",\"type\":\"string\"},{\"name\":\"customer_email\",\"type\":\"string\"},{\"name\":\"customer_address\",\"type\":\"string\"}]}},{\"name\":\"payment_method\",\"type\":{\"type\":\"record\",\"name\":\"Payment\",\"fields\":[{\"name\":\"payment_method_code\",\"type\":\"int\"},{\"name\":\"card_number\",\"type\":\"long\"},{\"name\":\"expiration_date\",\"type\":\"string\",\"default\":\"00/00\"},{\"name\":\"cvv\",\"type\":\"int\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The id of the order. */
  @Deprecated public long order_id;
  @Deprecated public long order_date;
  @Deprecated public double order_amount;
  @Deprecated public java.util.List<io.confluent.demo.orders.avro.pojo.Product> products;
  @Deprecated public io.confluent.demo.orders.avro.pojo.Customer customer;
  @Deprecated public io.confluent.demo.orders.avro.pojo.Payment payment_method;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param order_id The id of the order.
   * @param order_date The new value for order_date
   * @param order_amount The new value for order_amount
   * @param products The new value for products
   * @param customer The new value for customer
   * @param payment_method The new value for payment_method
   */
  public Order(java.lang.Long order_id, java.lang.Long order_date, java.lang.Double order_amount, java.util.List<io.confluent.demo.orders.avro.pojo.Product> products, io.confluent.demo.orders.avro.pojo.Customer customer, io.confluent.demo.orders.avro.pojo.Payment payment_method) {
    this.order_id = order_id;
    this.order_date = order_date;
    this.order_amount = order_amount;
    this.products = products;
    this.customer = customer;
    this.payment_method = payment_method;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return order_id;
    case 1: return order_date;
    case 2: return order_amount;
    case 3: return products;
    case 4: return customer;
    case 5: return payment_method;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: order_id = (java.lang.Long)value$; break;
    case 1: order_date = (java.lang.Long)value$; break;
    case 2: order_amount = (java.lang.Double)value$; break;
    case 3: products = (java.util.List<io.confluent.demo.orders.avro.pojo.Product>)value$; break;
    case 4: customer = (io.confluent.demo.orders.avro.pojo.Customer)value$; break;
    case 5: payment_method = (io.confluent.demo.orders.avro.pojo.Payment)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'order_id' field.
   * @return The id of the order.
   */
  public long getOrderId() {
    return order_id;
  }


  /**
   * Sets the value of the 'order_id' field.
   * The id of the order.
   * @param value the value to set.
   */
  public void setOrderId(long value) {
    this.order_id = value;
  }

  /**
   * Gets the value of the 'order_date' field.
   * @return The value of the 'order_date' field.
   */
  public long getOrderDate() {
    return order_date;
  }


  /**
   * Sets the value of the 'order_date' field.
   * @param value the value to set.
   */
  public void setOrderDate(long value) {
    this.order_date = value;
  }

  /**
   * Gets the value of the 'order_amount' field.
   * @return The value of the 'order_amount' field.
   */
  public double getOrderAmount() {
    return order_amount;
  }


  /**
   * Sets the value of the 'order_amount' field.
   * @param value the value to set.
   */
  public void setOrderAmount(double value) {
    this.order_amount = value;
  }

  /**
   * Gets the value of the 'products' field.
   * @return The value of the 'products' field.
   */
  public java.util.List<io.confluent.demo.orders.avro.pojo.Product> getProducts() {
    return products;
  }


  /**
   * Sets the value of the 'products' field.
   * @param value the value to set.
   */
  public void setProducts(java.util.List<io.confluent.demo.orders.avro.pojo.Product> value) {
    this.products = value;
  }

  /**
   * Gets the value of the 'customer' field.
   * @return The value of the 'customer' field.
   */
  public io.confluent.demo.orders.avro.pojo.Customer getCustomer() {
    return customer;
  }


  /**
   * Sets the value of the 'customer' field.
   * @param value the value to set.
   */
  public void setCustomer(io.confluent.demo.orders.avro.pojo.Customer value) {
    this.customer = value;
  }

  /**
   * Gets the value of the 'payment_method' field.
   * @return The value of the 'payment_method' field.
   */
  public io.confluent.demo.orders.avro.pojo.Payment getPaymentMethod() {
    return payment_method;
  }


  /**
   * Sets the value of the 'payment_method' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(io.confluent.demo.orders.avro.pojo.Payment value) {
    this.payment_method = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static io.confluent.demo.orders.avro.pojo.Order.Builder newBuilder() {
    return new io.confluent.demo.orders.avro.pojo.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static io.confluent.demo.orders.avro.pojo.Order.Builder newBuilder(io.confluent.demo.orders.avro.pojo.Order.Builder other) {
    if (other == null) {
      return new io.confluent.demo.orders.avro.pojo.Order.Builder();
    } else {
      return new io.confluent.demo.orders.avro.pojo.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static io.confluent.demo.orders.avro.pojo.Order.Builder newBuilder(io.confluent.demo.orders.avro.pojo.Order other) {
    if (other == null) {
      return new io.confluent.demo.orders.avro.pojo.Order.Builder();
    } else {
      return new io.confluent.demo.orders.avro.pojo.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    /** The id of the order. */
    private long order_id;
    private long order_date;
    private double order_amount;
    private java.util.List<io.confluent.demo.orders.avro.pojo.Product> products;
    private io.confluent.demo.orders.avro.pojo.Customer customer;
    private io.confluent.demo.orders.avro.pojo.Customer.Builder customerBuilder;
    private io.confluent.demo.orders.avro.pojo.Payment payment_method;
    private io.confluent.demo.orders.avro.pojo.Payment.Builder payment_methodBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.demo.orders.avro.pojo.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.order_id)) {
        this.order_id = data().deepCopy(fields()[0].schema(), other.order_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.order_date)) {
        this.order_date = data().deepCopy(fields()[1].schema(), other.order_date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.order_amount)) {
        this.order_amount = data().deepCopy(fields()[2].schema(), other.order_amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.products)) {
        this.products = data().deepCopy(fields()[3].schema(), other.products);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.customer)) {
        this.customer = data().deepCopy(fields()[4].schema(), other.customer);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasCustomerBuilder()) {
        this.customerBuilder = io.confluent.demo.orders.avro.pojo.Customer.newBuilder(other.getCustomerBuilder());
      }
      if (isValidValue(fields()[5], other.payment_method)) {
        this.payment_method = data().deepCopy(fields()[5].schema(), other.payment_method);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasPaymentMethodBuilder()) {
        this.payment_methodBuilder = io.confluent.demo.orders.avro.pojo.Payment.newBuilder(other.getPaymentMethodBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.demo.orders.avro.pojo.Order other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.order_id)) {
        this.order_id = data().deepCopy(fields()[0].schema(), other.order_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.order_date)) {
        this.order_date = data().deepCopy(fields()[1].schema(), other.order_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.order_amount)) {
        this.order_amount = data().deepCopy(fields()[2].schema(), other.order_amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.products)) {
        this.products = data().deepCopy(fields()[3].schema(), other.products);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.customer)) {
        this.customer = data().deepCopy(fields()[4].schema(), other.customer);
        fieldSetFlags()[4] = true;
      }
      this.customerBuilder = null;
      if (isValidValue(fields()[5], other.payment_method)) {
        this.payment_method = data().deepCopy(fields()[5].schema(), other.payment_method);
        fieldSetFlags()[5] = true;
      }
      this.payment_methodBuilder = null;
    }

    /**
      * Gets the value of the 'order_id' field.
      * The id of the order.
      * @return The value.
      */
    public long getOrderId() {
      return order_id;
    }


    /**
      * Sets the value of the 'order_id' field.
      * The id of the order.
      * @param value The value of 'order_id'.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder setOrderId(long value) {
      validate(fields()[0], value);
      this.order_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'order_id' field has been set.
      * The id of the order.
      * @return True if the 'order_id' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'order_id' field.
      * The id of the order.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder clearOrderId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_date' field.
      * @return The value.
      */
    public long getOrderDate() {
      return order_date;
    }


    /**
      * Sets the value of the 'order_date' field.
      * @param value The value of 'order_date'.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder setOrderDate(long value) {
      validate(fields()[1], value);
      this.order_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'order_date' field has been set.
      * @return True if the 'order_date' field has been set, false otherwise.
      */
    public boolean hasOrderDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'order_date' field.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder clearOrderDate() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_amount' field.
      * @return The value.
      */
    public double getOrderAmount() {
      return order_amount;
    }


    /**
      * Sets the value of the 'order_amount' field.
      * @param value The value of 'order_amount'.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder setOrderAmount(double value) {
      validate(fields()[2], value);
      this.order_amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'order_amount' field has been set.
      * @return True if the 'order_amount' field has been set, false otherwise.
      */
    public boolean hasOrderAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'order_amount' field.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder clearOrderAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'products' field.
      * @return The value.
      */
    public java.util.List<io.confluent.demo.orders.avro.pojo.Product> getProducts() {
      return products;
    }


    /**
      * Sets the value of the 'products' field.
      * @param value The value of 'products'.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder setProducts(java.util.List<io.confluent.demo.orders.avro.pojo.Product> value) {
      validate(fields()[3], value);
      this.products = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'products' field has been set.
      * @return True if the 'products' field has been set, false otherwise.
      */
    public boolean hasProducts() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'products' field.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder clearProducts() {
      products = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer' field.
      * @return The value.
      */
    public io.confluent.demo.orders.avro.pojo.Customer getCustomer() {
      return customer;
    }


    /**
      * Sets the value of the 'customer' field.
      * @param value The value of 'customer'.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder setCustomer(io.confluent.demo.orders.avro.pojo.Customer value) {
      validate(fields()[4], value);
      this.customerBuilder = null;
      this.customer = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'customer' field has been set.
      * @return True if the 'customer' field has been set, false otherwise.
      */
    public boolean hasCustomer() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'customer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.confluent.demo.orders.avro.pojo.Customer.Builder getCustomerBuilder() {
      if (customerBuilder == null) {
        if (hasCustomer()) {
          setCustomerBuilder(io.confluent.demo.orders.avro.pojo.Customer.newBuilder(customer));
        } else {
          setCustomerBuilder(io.confluent.demo.orders.avro.pojo.Customer.newBuilder());
        }
      }
      return customerBuilder;
    }

    /**
     * Sets the Builder instance for the 'customer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.demo.orders.avro.pojo.Order.Builder setCustomerBuilder(io.confluent.demo.orders.avro.pojo.Customer.Builder value) {
      clearCustomer();
      customerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'customer' field has an active Builder instance
     * @return True if the 'customer' field has an active Builder instance
     */
    public boolean hasCustomerBuilder() {
      return customerBuilder != null;
    }

    /**
      * Clears the value of the 'customer' field.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder clearCustomer() {
      customer = null;
      customerBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'payment_method' field.
      * @return The value.
      */
    public io.confluent.demo.orders.avro.pojo.Payment getPaymentMethod() {
      return payment_method;
    }


    /**
      * Sets the value of the 'payment_method' field.
      * @param value The value of 'payment_method'.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder setPaymentMethod(io.confluent.demo.orders.avro.pojo.Payment value) {
      validate(fields()[5], value);
      this.payment_methodBuilder = null;
      this.payment_method = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'payment_method' field has been set.
      * @return True if the 'payment_method' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'payment_method' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.confluent.demo.orders.avro.pojo.Payment.Builder getPaymentMethodBuilder() {
      if (payment_methodBuilder == null) {
        if (hasPaymentMethod()) {
          setPaymentMethodBuilder(io.confluent.demo.orders.avro.pojo.Payment.newBuilder(payment_method));
        } else {
          setPaymentMethodBuilder(io.confluent.demo.orders.avro.pojo.Payment.newBuilder());
        }
      }
      return payment_methodBuilder;
    }

    /**
     * Sets the Builder instance for the 'payment_method' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.demo.orders.avro.pojo.Order.Builder setPaymentMethodBuilder(io.confluent.demo.orders.avro.pojo.Payment.Builder value) {
      clearPaymentMethod();
      payment_methodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'payment_method' field has an active Builder instance
     * @return True if the 'payment_method' field has an active Builder instance
     */
    public boolean hasPaymentMethodBuilder() {
      return payment_methodBuilder != null;
    }

    /**
      * Clears the value of the 'payment_method' field.
      * @return This builder.
      */
    public io.confluent.demo.orders.avro.pojo.Order.Builder clearPaymentMethod() {
      payment_method = null;
      payment_methodBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.order_id = fieldSetFlags()[0] ? this.order_id : (java.lang.Long) defaultValue(fields()[0]);
        record.order_date = fieldSetFlags()[1] ? this.order_date : (java.lang.Long) defaultValue(fields()[1]);
        record.order_amount = fieldSetFlags()[2] ? this.order_amount : (java.lang.Double) defaultValue(fields()[2]);
        record.products = fieldSetFlags()[3] ? this.products : (java.util.List<io.confluent.demo.orders.avro.pojo.Product>) defaultValue(fields()[3]);
        if (customerBuilder != null) {
          try {
            record.customer = this.customerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("customer"));
            throw e;
          }
        } else {
          record.customer = fieldSetFlags()[4] ? this.customer : (io.confluent.demo.orders.avro.pojo.Customer) defaultValue(fields()[4]);
        }
        if (payment_methodBuilder != null) {
          try {
            record.payment_method = this.payment_methodBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("payment_method"));
            throw e;
          }
        } else {
          record.payment_method = fieldSetFlags()[5] ? this.payment_method : (io.confluent.demo.orders.avro.pojo.Payment) defaultValue(fields()[5]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.order_id);

    out.writeLong(this.order_date);

    out.writeDouble(this.order_amount);

    long size0 = this.products.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (io.confluent.demo.orders.avro.pojo.Product e0: this.products) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    this.customer.customEncode(out);

    this.payment_method.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.order_id = in.readLong();

      this.order_date = in.readLong();

      this.order_amount = in.readDouble();

      long size0 = in.readArrayStart();
      java.util.List<io.confluent.demo.orders.avro.pojo.Product> a0 = this.products;
      if (a0 == null) {
        a0 = new SpecificData.Array<io.confluent.demo.orders.avro.pojo.Product>((int)size0, SCHEMA$.getField("products").schema());
        this.products = a0;
      } else a0.clear();
      SpecificData.Array<io.confluent.demo.orders.avro.pojo.Product> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<io.confluent.demo.orders.avro.pojo.Product>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          io.confluent.demo.orders.avro.pojo.Product e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new io.confluent.demo.orders.avro.pojo.Product();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      if (this.customer == null) {
        this.customer = new io.confluent.demo.orders.avro.pojo.Customer();
      }
      this.customer.customDecode(in);

      if (this.payment_method == null) {
        this.payment_method = new io.confluent.demo.orders.avro.pojo.Payment();
      }
      this.payment_method.customDecode(in);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.order_id = in.readLong();
          break;

        case 1:
          this.order_date = in.readLong();
          break;

        case 2:
          this.order_amount = in.readDouble();
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<io.confluent.demo.orders.avro.pojo.Product> a0 = this.products;
          if (a0 == null) {
            a0 = new SpecificData.Array<io.confluent.demo.orders.avro.pojo.Product>((int)size0, SCHEMA$.getField("products").schema());
            this.products = a0;
          } else a0.clear();
          SpecificData.Array<io.confluent.demo.orders.avro.pojo.Product> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<io.confluent.demo.orders.avro.pojo.Product>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              io.confluent.demo.orders.avro.pojo.Product e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new io.confluent.demo.orders.avro.pojo.Product();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 4:
          if (this.customer == null) {
            this.customer = new io.confluent.demo.orders.avro.pojo.Customer();
          }
          this.customer.customDecode(in);
          break;

        case 5:
          if (this.payment_method == null) {
            this.payment_method = new io.confluent.demo.orders.avro.pojo.Payment();
          }
          this.payment_method.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










